/**
	A template class that allows one to very easily call any function in nvgt on another thread and fetch that function's return value after the call has complete.
	1. async\<T\>();
	2. async\<T\>(const ?&in function, const ?&in arg1, const ?&in arg2, ...);
	## Template arguments:
		* T: The return type of the function being called.
	## Arguments (2):
		* const ?&in function: The function that should be called, passing anything that is not a function will result in an exception.
		* const ?&in arg1: The function's first argument, you do not need to pass more arguments than needed.
		* const ?&in arg2: The function's second argument, passing invalid or mismatched datatypes as any of these arguments will cause an exception.
		* ... Up to 15 arguments.
	## Remarks:
		Generally speaking, this is the most convenient method of applying multithreading to your nvgt application. While lower level methods of dealing with threads require the programmer to create functions with specific signatures that usually don't allow for return values, this class allows you to quite transparently call any function in the application from a function in your script to the alert box built into NVGT on another thread while still maintaining the return value of such a function for later retrieval.
		For ease of use, the constructor of this class actually calls the function provided and passes the given arguments to it. Therefor, the standard use case for this class is to create an instance of it, then to first call instance.wait() or instance.try_wait(ms) before retrieving the instance.value variable when the function's return value is needed, after either instance.wait() returns or after instance.try_wait() returns true. Using the instance.complete/instance.failed properties with your own waiting logic is also perfectly acceptable and sometimes recommended.
		The one drawback that makes this class look a little less pretty is that if you wish to call functions that are part of a class, you must create funcdefs for the signature of the function you want to call, then wrap the object's function in an instance of the funcdef. For example if a class contained a function bool load(string filename), you must declare funcdef void my_void_funcdef(string); and if you then had an instance of such a class called my_object, you must initialize the async object like async\<bool\>(my_void_funcdef(my_object.load), "my_file.txt"); however it is a relatively minor drawback.
		Be aware that this class can throw exceptions if you do not pass arguments to the function correctly, this is because the function call happens completely at runtime rather than being prepared at compilation time like the rest of the script.
		Internally, this function is registered with Angelscript multiple times with an expanding number of arguments, meaning that it is OK to pass only the number of arguments you need to a function you want to call even though this function's signature seems to indicate that the dynamically typed arguments here don't have a default value.
*/

// Example:
void main() {
	show_window("example");
	async<int>@ answer = async<int>(question, "exit program", "Do you want to exit the program?");
	// Now that the user sees the dialog, lets play a sound.
	sound s;
	s.load("c:/windows/media/ding.wav");
	s.play_looped();
	// We will move the sound around the stereo field just to drive home the point that we can execute our own code while the dialog is showing.
	int pan = 0;
	while(true) {
		wait(25); // A slower value than average for the sake of the pan effect, will make window a bit unresponsive though (use a timer).
		pan += random(-2, 2);
		if (pan < -100) pan = -100;
		else if (pan > 100) pan = 100;
		s.pan = pan;
		if (answer.complete) { // The async function has successfully finished and a return value is available.
			if (answer.value == 1) exit();
			else @answer = async<int>(question, "exit program", "Now do you want to exit the program?");
		}
	}
}
